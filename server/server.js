import express from 'express';
import cors from 'cors';
import { PrismaClient } from '@prisma/client';

const app = express();
const PORT = 5000;
const prisma = new PrismaClient();

// Middleware
app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
const generateYesterdayData = async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        yesterday.setHours(0, 0, 0, 0);

        const existingData = await prisma.temperature.findFirst({
            where: {
                timestamp: {
                    gte: yesterday
                }
            }
        });

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        if (!existingData) {
            console.log('üå°Ô∏è Generating temperature data for yesterday...');

            const temperatures = [];
            const startTime = new Date(yesterday);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
            for (let minute = 0; minute < 24 * 60; minute++) {
                const timestamp = new Date(startTime);
                timestamp.setMinutes(minute);

                // –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç 40 –¥–æ 60 –≥—Ä–∞–¥—É—Å–æ–≤
                const temperatureValue = 40 + Math.random() * 20;

                temperatures.push({
                    value: parseFloat(temperatureValue.toFixed(1)),
                    timestamp: timestamp
                });
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–æ–º
            await prisma.temperature.createMany({
                data: temperatures
            });

            console.log(`‚úÖ Generated ${temperatures.length} temperature records`);
        }
    } catch (error) {
        console.error('Error generating temperature data:', error);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initializeDatabase = async () => {
    try {
        await prisma.$executeRaw`PRAGMA foreign_keys = ON`;
        await generateYesterdayData();
        console.log('‚úÖ SQLite database initialized with temperature data');
    } catch (error) {
        console.error('‚ùå Database initialization error:', error);
    }
};

// API Routes

// GET - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
app.get('/api/temperatures/:date', async (req, res) => {
    try {
        const { date } = req.params; // —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD

        // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const startDate = new Date(date + 'T00:00:00');
        const endDate = new Date(date + 'T23:59:59');

        const temperatures = await prisma.temperature.findMany({
            where: {
                timestamp: {
                    gte: startDate,
                    lte: endDate
                }
            },
            orderBy: {
                timestamp: 'asc'
            }
        });

        res.json({
            date: date,
            count: temperatures.length,
            data: temperatures
        });

    } catch (error) {
        console.error('Error fetching temperatures:', error);
        res.status(500).json({ error: 'Database error' });
    }
});

// GET - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
app.get('/api/temperatures', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 100;

        const temperatures = await prisma.temperature.findMany({
            orderBy: {
                timestamp: 'desc'
            },
            take: limit
        });

        res.json(temperatures.reverse()); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    } catch (error) {
        console.error('Error fetching temperatures:', error);
        res.status(500).json({ error: 'Database error' });
    }
});

// POST - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
app.post('/api/temperatures', async (req, res) => {
    try {
        const { value } = req.body;

        if (value === undefined) {
            return res.status(400).json({ error: 'Temperature value is required' });
        }

        const temperature = await prisma.temperature.create({
            data: {
                value: parseFloat(value)
            }
        });

        res.status(201).json(temperature);
    } catch (error) {
        console.error('Error creating temperature record:', error);
        res.status(500).json({ error: 'Database error' });
    }
});

// GET - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
app.get('/api/stats/:date', async (req, res) => {
    try {
        const { date } = req.params;
        const startDate = new Date(date + 'T00:00:00');
        const endDate = new Date(date + 'T23:59:59');

        const temperatures = await prisma.temperature.findMany({
            where: {
                timestamp: {
                    gte: startDate,
                    lte: endDate
                }
            }
        });

        if (temperatures.length === 0) {
            return res.status(404).json({ error: 'No data for this date' });
        }

        const values = temperatures.map(t => t.value);
        const stats = {
            date: date,
            count: temperatures.length,
            average: parseFloat((values.reduce((a, b) => a + b, 0) / values.length).toFixed(1)),
            min: Math.min(...values),
            max: Math.max(...values),
            firstRecord: temperatures[0],
            lastRecord: temperatures[temperatures.length - 1]
        };

        res.json(stats);
    } catch (error) {
        console.error('Error calculating stats:', error);
        res.status(500).json({ error: 'Database error' });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    await initializeDatabase();
    console.log(`üöÄ Server running on http://localhost:${PORT}`);
    console.log(`üå°Ô∏è Temperature monitoring app ready`);
});

// Graceful shutdown
process.on('SIGINT', async () => {
    await prisma.$disconnect();
    process.exit(0);
});